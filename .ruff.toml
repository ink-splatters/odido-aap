# Python version target for modernizations
target-version = "py312" # Use py312 for maximum Python 3.12 modernization features
line-length = 100        # From upgrade/pyproject.toml
#indent-width = 2

# Files to exclude
exclude = [
  ".git",
  "__pycache__",
  ".venv",
  "build",
  "dist",
  "*.egg-info",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
]

[lint]
# Comprehensive rule selection combining modernization + code quality
select = [
  # Core Python modernization (our priority)
  "UP",     # pyupgrade - modernize Python code for target version
  "FA",     # flake8-future-annotations - add future annotations import
  "ANN204", # flake8-annotations - require return type for __init__
  "TCH",    # flake8-type-checking - move imports under TYPE_CHECKING
  "PYI",    # flake8-pyi - type stub files best practices

  # Code quality from upgrade/pyproject.toml
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings  
  "F",   # pyflakes
  "I",   # isort - import sorting
  "N",   # pep8-naming
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "RUF", # ruff-specific rules
  "PT",  # flake8-pytest-style
  "PIE", # flake8-pie
  "COM", # flake8-commas
]

# Specific modernization rules to enforce
extend-select = [
  # Python 3.10+ type hint modernization
  "UP006", # Use `list` instead of `List` for type annotations
  "UP007", # Use `X | Y` for union types instead of `Optional`
  "UP035", # Import from collections.abc instead of typing
  "UP037", # Remove quotes from annotations when possible
  "UP040", # Type alias with TypeAlias annotation

  # Future annotations
  "FA100", # Add `from __future__ import annotations` when needed
  "FA102", # Add `from __future__ import annotations` for PEP 604 unions
]

ignore = [
  # From upgrade/pyproject.toml (preserve these)
  "E501",   # line too long (handled by formatter)
  "B008",   # do not perform function calls in argument defaults
  "N818",   # exception name should be named with an Error suffix
  "COM812", # trailing comma missing (handled by formatter)
  "S101",   # security issues
  "PT011",  # pytest-style

  # Avoid conflicts with modernization goals
  "T201", # print found (keep prints for now)
  "T20",  # Remove T20 from select since we're ignoring T201
]

# Allow automatic fixes including unsafe ones
unfixable = []

# Per-file ignores
[lint.per-file-ignores]
"test_*.py" = ["T201"] # Allow print in tests
"*_test.py" = ["T201"] # Allow print in tests

[lint.pyupgrade]
# Use Python 3.10+ style type hints
keep-runtime-typing = false

[lint.flake8-annotations]
# Configuration for annotation rules
allow-star-arg-any = true
suppress-none-returning = false
mypy-init-return = true         # Require -> None for __init__

[lint.isort]
# Import sorting configuration
force-single-line = false

[lint.flake8-bugbear]
# Allow common patterns
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "pydantic.Field"]

[format]
# Code formatting options
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true      # Format code in docstrings
docstring-code-line-length = 88   # Shorter lines in docstrings
